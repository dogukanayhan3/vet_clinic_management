{"ast":null,"code":"var _jsxFileName = \"/Users/dogukan/Desktop/vet_clinic_management_system/src/components/Register.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Register = () => {\n  _s();\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: ''\n  });\n  const [userId, setUserId] = useState(null);\n  const handleChange = e => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch('/api/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      });\n      const result = await response.json();\n      if (result.userId) {\n        setUserId(result.userId);\n        alert(`Registration successful! Your user ID is: ${result.userId}`);\n      } else {\n        alert('Registration failed');\n      }\n    } catch (error) {\n      console.error('Registration error:', error);\n      alert('Registration failed');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"name\",\n        placeholder: \"Name\",\n        value: formData.name,\n        onChange: handleChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"email\",\n        type: \"email\",\n        placeholder: \"Email\",\n        value: formData.email,\n        onChange: handleChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"password\",\n        type: \"password\",\n        placeholder: \"Password\",\n        value: formData.password,\n        onChange: handleChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), userId && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Save your User ID: \", userId, \" (You'll need this to add pets)\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(Register, \"uJE+PRg23+g7bTT+EzXX64PQY3U=\");\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Register","_s","formData","setFormData","name","email","password","userId","setUserId","handleChange","e","target","value","handleSubmit","preventDefault","response","fetch","method","headers","body","JSON","stringify","result","json","alert","error","console","children","onSubmit","placeholder","onChange","required","fileName","_jsxFileName","lineNumber","columnNumber","type","_c","$RefreshReg$"],"sources":["/Users/dogukan/Desktop/vet_clinic_management_system/src/components/Register.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst Register = () => {\n  const [formData, setFormData] = useState({ \n    name: '', \n    email: '', \n    password: '' \n  });\n  const [userId, setUserId] = useState(null);\n\n  const handleChange = (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const response = await fetch('/api/register', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(formData),\n      });\n      const result = await response.json();\n      \n      if (result.userId) {\n        setUserId(result.userId);\n        alert(`Registration successful! Your user ID is: ${result.userId}`);\n      } else {\n        alert('Registration failed');\n      }\n    } catch (error) {\n      console.error('Registration error:', error);\n      alert('Registration failed');\n    }\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input \n          name=\"name\" \n          placeholder=\"Name\" \n          value={formData.name} \n          onChange={handleChange} \n          required \n        />\n        <input \n          name=\"email\" \n          type=\"email\" \n          placeholder=\"Email\" \n          value={formData.email} \n          onChange={handleChange} \n          required \n        />\n        <input \n          name=\"password\" \n          type=\"password\" \n          placeholder=\"Password\" \n          value={formData.password} \n          onChange={handleChange} \n          required \n        />\n        <button type=\"submit\">Register</button>\n      </form>\n      {userId && (\n        <p>Save your User ID: {userId} (You'll need this to add pets)</p>\n      )}\n    </div>\n  );\n};\n\nexport default Register;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}